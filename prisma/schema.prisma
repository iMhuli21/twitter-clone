generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  seen
  unseen
}

model Comment {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime         @default(now())
  media     String[]
  post      Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String           @db.ObjectId
  likes     LikeComment[]
  retweets  RetweetComment[]
  replies   Reply[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String           @db.ObjectId
}

model LikeComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
  userId    String  @db.ObjectId
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  bannerImage   String
  bio           String
  comments      Comment[]
  createdAt     DateTime       @default(now())
  email         String         @unique
  following     Int            @default(0)
  followers     Int            @default(0)
  headerTitle   String
  notifications Notification[]
  posts         Post[]
  password      String
  photo         String
  username      String         @unique
}

model Post {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  author    User          @relation(onDelete: Cascade, fields: [authorId], references: [id])
  authorId  String        @db.ObjectId
  body      String?
  createdAt DateTime      @default(now())
  comments  Comment[]
  media     String[]
  likes     LikePost[]
  retweets  RetweetPost[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  userId    String
  body      String?
  media     String[]
}

model LikePost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  userId String
}

model RetweetPost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
  userId String
}

model RetweetComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String  @db.ObjectId
  userId    String
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime @default(now())
  status     Status
  receiver   User     @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String   @db.ObjectId
}
