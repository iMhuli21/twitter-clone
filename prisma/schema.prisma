generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  seen
  unseen
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime  @default(now())
  media     String?
  post      Post      @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
  replies   Reply[]
  Like      Like[]
  Retweets  Retweet[]
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId
  post      Post    @relation(fields: [postId], references: [id])
  postId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

model Retweet {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String  @db.ObjectId
  post      Post    @relation(fields: [postId], references: [id])
  postId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @db.ObjectId
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
  media     String?
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  bannerImage  String
  bio          String
  createdAt    DateTime       @default(now())
  email        String         @unique
  following    Int            @default(0)
  followers    Int            @default(0)
  headerTitle  String
  Likes        Like[]
  Notificatons Notification[]
  Retweets     Retweet[]
  posts        Post[]
  password     String
  photo        String
  username     String         @unique
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  body      String?
  createdAt DateTime  @default(now())
  comments  Comment[]
  media     String[]
  Likes     Like[]
  Retweet   Retweet[]
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  createdAt  DateTime @default(now())
  status     Status
  receiver   User     @relation(fields: [receiverId], references: [id])
  receiverId String   @db.ObjectId
}
